datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  hashedPassword String?
  role          Role @default(USER)
  orders        Order[]
  cartProducts  cartProducts[]
  company       Company?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews       Review[]
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Order {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  amount            Float
  status            String
  deliveryAddress   Address
  deliveryStatus    String?
  createdDate       DateTime
  products          cartProductType[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model cartProducts {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  name              String
  price             Float
  brand             String
  category          String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model product {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  companyId         String?  @db.ObjectId
  description       String
  price             Float
  brand             String
  category          String
  inStock           Boolean
  images            Image[]
  reviews           Review[]

  company           Company? @relation(fields: [companyId], references: [id])
}

model Review {
id                String  @id @default(auto()) @map("_id") @db.ObjectId
userId            String  @db.ObjectId
productId         String  @db.ObjectId
rating            Int
comment           String
createdAt         DateTime  @default(now())

product           product @relation(fields: [productId], references: [id])
user              User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id              String  @id @default(auto())  @map("_id") @db.ObjectId
  userId          String @db.ObjectId @unique
  companyName     String
  productCategories String[]
  officeLocation    String
  companyDescription  String
  createdDate     DateTime  @default(now())
  product         product[]

  user            User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
enum Role {
    USER
    COMPANY_MANAGER
    ADMIN
} 

type cartProductType {
    id            String
    companyId     String?
    name          String
    description   String
    category      String
    brand         String
    selectedImage Image
    quantity      Int
    price         Float
}

type Image {
  color           String
  colorCode       String
  image           String
}

type Address {
  region          String
  line1           String
  district        String
  street          String
}
